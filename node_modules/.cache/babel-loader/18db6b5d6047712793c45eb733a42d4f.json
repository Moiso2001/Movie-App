{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moiso\\\\OneDrive\\\\Desktop\\\\Projects to Show\\\\movie-app\\\\src\\\\components\\\\Movie\\\\Movie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport styles from './Movie.module.css';\nimport { getMoviesDetail, clearDetailMovie } from '../../actions/index';\nimport Loading from '../Loading'; // My favorite component :) the movie or details component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Movie = function () {\n  _s();\n\n  const movie = useSelector(state => state.movieDetail); // When you click on the name of a card the movie object will be added to movieDetail(redux-state) and with this hook you are bring it here.\n\n  const dispatch = useDispatch(); // useDispatch hook to \"dispatch\" our actions imported in the line 05.                                \n\n  const {\n    id\n  } = useParams(); // Remember this Movie is being rendered with the route /movie/:id here we're destructuring params with \"useParams\" and asking for the ID this will be the imdbID settled when you clicked the name of the card.\n\n  useEffect(() => {\n    dispatch(getMoviesDetail(id)); // compoment did mount dispatching the getMoviesDetail action, this action will ask more information of the movie.\n\n    return () => {\n      dispatch(clearDetailMovie()); // component will unmount, when you unmount the component we clean the movieDetail(redux-state) so this page will be set into an empty page\n    }; // this helps when the user close the MovieDetail component and open it again with a different movie, if we don't do this, for a few seconds the user\n  }, []); // will se the last movie opened, next being deleted and re-render it with the new movie :( not something good at all...\n\n  console.log(movie);\n\n  if (Object.keys(movie).length > 0) {\n    // \"movie\" it's the state and we don't want to render anything if we're not sure that movie(redux-state) have something in there\n    return (\n      /*#__PURE__*/\n      // this is a little verification of that, if movie have something there, render it.. otherwise don't do it.\n      _jsxDEV(\"div\", {\n        className: styles.divGlobal,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.divTitle,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: styles.Title,\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.divBody,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.Poster,\n            alt: \"poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.Rated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.Year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: movie.Plot\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.divDescription,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: `Director: ${movie.Director}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `Box Office: ${movie.BoxOffice}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `IMDB Rating: ${movie.imdbRating}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: `Awards: ${movie.Awards}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)\n    );\n  } else return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 18\n  }, this); // If movie(redux-state) is empty render our Loading component :))\n\n};\n\n_s(Movie, \"uSs85KLuyvgO+UiKXD4i7L2Bdgk=\", false, function () {\n  return [useSelector, useDispatch, useParams];\n});\n\n_c = Movie;\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","useParams","styles","getMoviesDetail","clearDetailMovie","Loading","Movie","movie","state","movieDetail","dispatch","id","console","log","Object","keys","length","divGlobal","divTitle","Title","divBody","Poster","Rated","Year","Plot","divDescription","Director","BoxOffice","imdbRating","Awards"],"sources":["C:/Users/Moiso/OneDrive/Desktop/Projects to Show/movie-app/src/components/Movie/Movie.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport styles from './Movie.module.css';\nimport { getMoviesDetail, clearDetailMovie } from '../../actions/index';\nimport Loading from '../Loading';\n\n                                                                                // My favorite component :) the movie or details component\nconst Movie = function(){\n\n    const movie = useSelector(state => state.movieDetail)    // When you click on the name of a card the movie object will be added to movieDetail(redux-state) and with this hook you are bring it here.\n    const dispatch = useDispatch()                           // useDispatch hook to \"dispatch\" our actions imported in the line 05.                                \n    const { id } = useParams();                              // Remember this Movie is being rendered with the route /movie/:id here we're destructuring params with \"useParams\" and asking for the ID this will be the imdbID settled when you clicked the name of the card.\n\nuseEffect(() => {\n    dispatch(getMoviesDetail(id))                           // compoment did mount dispatching the getMoviesDetail action, this action will ask more information of the movie.\n\n    return () => {\n        dispatch(clearDetailMovie())                        // component will unmount, when you unmount the component we clean the movieDetail(redux-state) so this page will be set into an empty page\n    }                                                       // this helps when the user close the MovieDetail component and open it again with a different movie, if we don't do this, for a few seconds the user\n},[])                                                       // will se the last movie opened, next being deleted and re-render it with the new movie :( not something good at all...\n\nconsole.log(movie);\n\n    if (Object.keys(movie).length > 0){                              // \"movie\" it's the state and we don't want to render anything if we're not sure that movie(redux-state) have something in there\n        return (                                                     // this is a little verification of that, if movie have something there, render it.. otherwise don't do it.\n            <div className={styles.divGlobal}>\n                <div className={styles.divTitle}>\n                    <h2 className={styles.Title}>{movie.Title}</h2>\n                </div>\n                <div className={styles.divBody}>\n                    <img src={movie.Poster} alt='poster'/>\n                    <div>\n                        <p>{movie.Rated}</p>\n                        <p>{movie.Year}</p>\n                        <span>{movie.Plot}</span>\n                    </div>\n                </div>\n                <div className={styles.divDescription}>\n                    <span>{`Director: ${movie.Director}`}</span>\n                    <span>{`Box Office: ${movie.BoxOffice}`}</span>  \n                    <span>{`IMDB Rating: ${movie.imdbRating}`}</span>  \n                    <span>{`Awards: ${movie.Awards}`}</span> \n                </div >\n            </div>\n        )\n    }else return <Loading/>                                              // If movie(redux-state) is empty render our Loading component :))\n        \n}\n\n\n\n\nexport default (Movie);"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,qBAAlD;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CAEgF;;;;AAChF,MAAMC,KAAK,GAAG,YAAU;EAAA;;EAEpB,MAAMC,KAAK,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAAzB,CAFoB,CAEqC;;EACzD,MAAMC,QAAQ,GAAGX,WAAW,EAA5B,CAHoB,CAGqC;;EACzD,MAAM;IAAEY;EAAF,IAASV,SAAS,EAAxB,CAJoB,CAIqC;;EAE7DH,SAAS,CAAC,MAAM;IACZY,QAAQ,CAACP,eAAe,CAACQ,EAAD,CAAhB,CAAR,CADY,CAC4C;;IAExD,OAAO,MAAM;MACTD,QAAQ,CAACN,gBAAgB,EAAjB,CAAR,CADS,CAC2C;IACvD,CAFD,CAHY,CAK4C;EAC3D,CANQ,EAMP,EANO,CAAT,CANwB,CAYoC;;EAE5DQ,OAAO,CAACC,GAAR,CAAYN,KAAZ;;EAEI,IAAIO,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBS,MAAnB,GAA4B,CAAhC,EAAkC;IAA+B;IAC7D;MAAA;MAA6D;MACzD;QAAK,SAAS,EAAEd,MAAM,CAACe,SAAvB;QAAA,wBACI;UAAK,SAAS,EAAEf,MAAM,CAACgB,QAAvB;UAAA,uBACI;YAAI,SAAS,EAAEhB,MAAM,CAACiB,KAAtB;YAAA,UAA8BZ,KAAK,CAACY;UAApC;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QADJ,eAII;UAAK,SAAS,EAAEjB,MAAM,CAACkB,OAAvB;UAAA,wBACI;YAAK,GAAG,EAAEb,KAAK,CAACc,MAAhB;YAAwB,GAAG,EAAC;UAA5B;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,wBACI;cAAA,UAAId,KAAK,CAACe;YAAV;cAAA;cAAA;cAAA;YAAA,QADJ,eAEI;cAAA,UAAIf,KAAK,CAACgB;YAAV;cAAA;cAAA;cAAA;YAAA,QAFJ,eAGI;cAAA,UAAOhB,KAAK,CAACiB;YAAb;cAAA;cAAA;cAAA;YAAA,QAHJ;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ,eAYI;UAAK,SAAS,EAAEtB,MAAM,CAACuB,cAAvB;UAAA,wBACI;YAAA,UAAQ,aAAYlB,KAAK,CAACmB,QAAS;UAAnC;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,UAAQ,eAAcnB,KAAK,CAACoB,SAAU;UAAtC;YAAA;YAAA;YAAA;UAAA,QAFJ,eAGI;YAAA,UAAQ,gBAAepB,KAAK,CAACqB,UAAW;UAAxC;YAAA;YAAA;YAAA;UAAA,QAHJ,eAII;YAAA,UAAQ,WAAUrB,KAAK,CAACsB,MAAO;UAA/B;YAAA;YAAA;YAAA;UAAA,QAJJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAZJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;EAqBH,CAtBD,MAsBM,oBAAO,QAAC,OAAD;IAAA;IAAA;IAAA;EAAA,QAAP,CAtCc,CAsCiD;;AAExE,CAxCD;;GAAMvB,K;UAEYN,W,EACGD,W,EACFE,S;;;KAJbK,K;AA6CN,eAAgBA,KAAhB"},"metadata":{},"sourceType":"module"}